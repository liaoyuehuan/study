########### 每个指令必须有分号结束。#################
#user administrator administrators;  #配置用户或者组，默认为nobody nobody。

pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址
worker_processes 2;  #允许生成的进程数，默认为1
worker_cpu_affinity 0000 0001;#为每个进程分配CPU
worker_rlimit_nofile 65536;   #每个进程可打开的最大文件句柄数
error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg


events {
    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on
    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off
    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
    worker_connections  1024;    #最大连接数，默认为512
}


http {
    include       mime.types;   #文件扩展名与文件类型映射表
    default_type  application/octet-stream; #默认文件类型，默认为text/plain
    #access_log off; #取消服务日志
    log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义格式
    access_log log/access.log myFormat;  #combined为日志格式的默认值
    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。
    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。

    upstream mysvr {
      server 127.0.0.1:7878;
      server 192.168.10.121:3333 backup;  #热备
    }
    error_page 404 https://www.baidu.com; #错误页

    server {
        keepalive_requests  120;        #单连接请求上限次数。
        listen              4545;       #监听端口
        server_name         127.0.0.1;  #监听地址或域名
        location ~*^.+$ {    #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。
           #root path;  #根目录
           #index vv.txt;  #设置默认页
           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表
           deny     127.0.0.1;      #拒绝的ip
           allow    172.18.5.54;    #允许的ip
        }



        #location / {
                #if (!-e $request_filename) {
                #    rewrite ^/(.*)$ /index.php last;
                #}
        #        try_files $uri /index.php?$args;
        #}

        #php-fpm
        #location ~ \.php {
        #        fastcgi_pass 127.0.0.1:9000;
        #       fastcgi_index index.php;
        #        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        #        fastcgi_param PATH_INFO                $fastcgi_script_name;
        #        fastcgi_hide_header X-Powered-By;
        #        include fastcgi_params;
        #        if (!-e $request_filename) {
        #            rewrite ^/(.*)$ /index.php last;
        #        }
        #    }

        #防盗链
        #location /images/ {
        #该指令的参数可以为下面的内容：
        # none:表示无Referer值的情况。
        # blocked:表示Referer值被防火墙进行伪装。
        # server_names:表示一个或多个主机名称。从Nginx 0.5.33版本开始，server_names中可以使用通配符"*"号。
        #        valid_referers none  www.baidu.com;
        #        if ($invalid_referer) {
        #           return 403;
        #        }
        #}
    }




    #https session cache 优化cpu，较少cpu额外的消耗，
    #1m可以缓存4大约000的连接
    ssl_session_cache           shared:SSL:10m;
    ssl_session_timeout         10m;

    server {

        listen 443;
        server_name                 www.example.com;
        ssl_certificate_key         ssl/rsa_private_key.pem;
        ssl_certifacate             ssl/server.crt;
        ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers                 HIGH:!aNULL:!MD5;

        location / {
             proxy_set_header   Host              $host;
             proxy_set_header   X-Real-IP         $remote_addr;
             proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
             proxy_set_header   X-Forwarded-Proto $scheme;
        }
    }

}

Rewrite规则
rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 http://seanlook.com/a/we/index.php?id=1&u=str 只对/a/we/index.php重写。语法rewrite regex replacement [flag];

1、1.$remote_addr 与$http_x_forwarded_for 用以记录客户端的ip地址； 2.$remote_user ：用来记录客户端用户名称； 3.$time_local ： 用来记录访问时间与时区；4.$request ： 用来记录请求的url与http协议；

  5.$status ： 用来记录请求状态；成功是200， 6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；7.$http_referer ：用来记录从那个页面链接访问过来的； 8.$http_user_agent ：记录客户端浏览器的相关信息；

2、惊群现象：一个网路连接到来，多个睡眠的进程被同事叫醒，但只有一个进程能获得链接，这样会影响系统性能。

3、每个指令必须有分号结束。


    $args ： #这个变量等于请求行中的参数，同$query_string
    $content_length ： 请求头中的Content-length字段。
    $content_type ： 请求头中的Content-Type字段。
    $document_root ： 当前请求在root指令中指定的值。
    $host ： 请求主机头字段，否则为服务器名称。
    $http_user_agent ： 客户端agent信息
    $http_cookie ： 客户端cookie信息
    $limit_rate ： 这个变量可以限制连接速率。
    $request_method ： 客户端请求的动作，通常为GET或POST。
    $remote_addr ： 客户端的IP地址。
    $remote_port ： 客户端的端口。
    $remote_user ： 已经经过Auth Basic Module验证的用户名。
    $request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。
    $scheme ： HTTP方法（如http，https）。
    $server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。
    $server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。
    $server_name ： 服务器名称。
    $server_port ： 请求到达服务器的端口号。
    $request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。
    $uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。
    $document_uri ： 与$uri相同。


flag标志位
last : 相当于Apache的[L]标记，表示完成rewrite
break : 停止执行当前虚拟主机的后续rewrite指令集
redirect : 返回302临时重定向，地址栏会显示跳转后的地址
permanent : 返回301永久重定向，地址栏会显示跳转后的地址
因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：


last一般写在server和if中，而break一般使用在location中
last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配
break和last都能组织继续执行后面的rewrite指令


nginx-redis
https://www.nginx.com/resources/wiki/modules/redis/


--------层层代理获取真实ip----------
第一层
 location / {
        proxy_http_version      1.1;
        proxy_pass              http://119.23.207.143:9500;
        proxy_set_header        Connection "keep-alive";
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    }
第二层
location / {
        proxy_http_version      1.1;
        if (!-f $request_filename){
            proxy_pass              http://127.0.0.1:9501;
        }
        proxy_set_header        Connection "keep-alive";
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $http_x_forwarded_for;  #如果$proxy_add_x_forwarded_for将会产生多个ip“,”号隔开
    }

